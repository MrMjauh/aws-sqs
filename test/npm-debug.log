0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Bitnami\\meanstack-3.0.2-0\\nodejs\\\\node.exe',
1 verbose cli   'C:\\Bitnami\\meanstack-3.0.2-0\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'install',
1 verbose cli   'memwatch' ]
2 info using npm@1.4.3
3 info using node@v0.12.2
4 verbose node symlink C:\Bitnami\meanstack-3.0.2-0\nodejs\\node.exe
5 verbose cache add [ 'memwatch', null ]
6 verbose cache add name=undefined spec="memwatch" args=["memwatch",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: 'memwatch',
7 verbose parsed url   path: 'memwatch',
7 verbose parsed url   href: 'memwatch' }
8 silly lockFile 6099d716-memwatch memwatch
9 verbose lock memwatch C:\Users\Rasmus\AppData\Roaming\npm-cache\6099d716-memwatch.lock
10 silly lockFile 6099d716-memwatch memwatch
11 silly lockFile 6099d716-memwatch memwatch
12 verbose addNamed [ 'memwatch', '' ]
13 verbose addNamed [ null, '*' ]
14 silly lockFile 0703982f-memwatch memwatch@
15 verbose lock memwatch@ C:\Users\Rasmus\AppData\Roaming\npm-cache\0703982f-memwatch.lock
16 silly addNameRange { name: 'memwatch', range: '*', hasData: false }
17 verbose registry.get memwatch not expired, no request
18 silly addNameRange number 2 { name: 'memwatch', range: '*', hasData: true }
19 silly addNameRange versions [ 'memwatch',
19 silly addNameRange   [ '0.1.0',
19 silly addNameRange     '0.1.1',
19 silly addNameRange     '0.1.2',
19 silly addNameRange     '0.1.3',
19 silly addNameRange     '0.1.4',
19 silly addNameRange     '0.1.5',
19 silly addNameRange     '0.2.0',
19 silly addNameRange     '0.2.1',
19 silly addNameRange     '0.2.2' ] ]
20 verbose addNamed [ 'memwatch', '0.2.2' ]
21 verbose addNamed [ '0.2.2', '0.2.2' ]
22 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
23 verbose lock memwatch@0.2.2 C:\Users\Rasmus\AppData\Roaming\npm-cache\de70a2ed-memwatch-0-2-2.lock
24 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
25 silly lockFile de70a2ed-memwatch-0-2-2 memwatch@0.2.2
26 silly lockFile 0703982f-memwatch memwatch@
27 silly lockFile 0703982f-memwatch memwatch@
28 silly resolved [ { name: 'memwatch',
28 silly resolved     description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
28 silly resolved     version: '0.2.2',
28 silly resolved     author: { name: 'Lloyd Hilaiel', url: 'http://lloyd.io' },
28 silly resolved     engines: { node: '>= 0.6.0' },
28 silly resolved     repository:
28 silly resolved      { type: 'git',
28 silly resolved        url: 'https://github.com/lloyd/node-memwatch.git' },
28 silly resolved     main: 'include.js',
28 silly resolved     licenses: [ [Object] ],
28 silly resolved     bugs: { url: 'https://github.com/lloyd/node-memwatch/issues' },
28 silly resolved     scripts: { install: 'node-gyp rebuild', test: 'mocha tests' },
28 silly resolved     devDependencies: { mocha: '1.2.2', should: '0.6.3', 'node-gyp': '0.5.7' },
28 silly resolved     contributors: [ [Object], [Object], [Object] ],
28 silly resolved     readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://secure.travis-ci.org/lloyd/node-memwatch.png)](http://travis-ci.org/lloyd/node-memwatch)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch`\n\nor\n\n- `git clone git://github.com/lloyd/node-memwatch.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
28 silly resolved     readmeFilename: 'README.md',
28 silly resolved     gypfile: true,
28 silly resolved     homepage: 'https://github.com/lloyd/node-memwatch',
28 silly resolved     _id: 'memwatch@0.2.2',
28 silly resolved     _from: 'memwatch@' } ]
29 info install memwatch@0.2.2 into C:\Bitnami\meanstack-3.0.2-0\sqs
30 info installOne memwatch@0.2.2
31 info C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch unbuild
32 info preuninstall memwatch@0.2.2
33 info uninstall memwatch@0.2.2
34 verbose true,C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules,C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules unbuild memwatch@0.2.2
35 info postuninstall memwatch@0.2.2
36 verbose tar unpack C:\Users\Rasmus\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
37 silly lockFile 3b4a1c8e--0-2-0-sqs-node-modules-memwatch tar://C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch
38 verbose lock tar://C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch C:\Users\Rasmus\AppData\Roaming\npm-cache\3b4a1c8e--0-2-0-sqs-node-modules-memwatch.lock
39 silly lockFile 571ac279-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Rasmus\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
40 verbose lock tar://C:\Users\Rasmus\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz C:\Users\Rasmus\AppData\Roaming\npm-cache\571ac279-cache-memwatch-0-2-2-package-tgz.lock
41 silly gunzTarPerm modes [ '755', '644' ]
42 silly gunzTarPerm extractEntry package.json
43 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
44 silly gunzTarPerm extractEntry .npmignore
45 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
46 silly gunzTarPerm extractEntry README.md
47 silly gunzTarPerm modified mode [ 'README.md', 438, 420 ]
48 silly gunzTarPerm extractEntry tests.js
49 silly gunzTarPerm modified mode [ 'tests.js', 438, 420 ]
50 silly gunzTarPerm extractEntry foo.js
51 silly gunzTarPerm modified mode [ 'foo.js', 438, 420 ]
52 silly gunzTarPerm extractEntry include.js
53 silly gunzTarPerm modified mode [ 'include.js', 438, 420 ]
54 silly gunzTarPerm extractEntry .travis.yml
55 silly gunzTarPerm modified mode [ '.travis.yml', 438, 420 ]
56 silly gunzTarPerm extractEntry ChangeLog
57 silly gunzTarPerm modified mode [ 'ChangeLog', 438, 420 ]
58 silly gunzTarPerm extractEntry #wscript#
59 silly gunzTarPerm modified mode [ '#wscript#', 438, 420 ]
60 silly gunzTarPerm extractEntry binding.gyp
61 silly gunzTarPerm modified mode [ 'binding.gyp', 438, 420 ]
62 silly gunzTarPerm extractEntry src/heapdiff.cc
63 silly gunzTarPerm modified mode [ 'src/heapdiff.cc', 438, 420 ]
64 silly gunzTarPerm extractEntry src/heapdiff.hh
65 silly gunzTarPerm modified mode [ 'src/heapdiff.hh', 438, 420 ]
66 silly gunzTarPerm extractEntry src/init.cc
67 silly gunzTarPerm modified mode [ 'src/init.cc', 438, 420 ]
68 silly gunzTarPerm extractEntry src/memwatch.cc
69 silly gunzTarPerm modified mode [ 'src/memwatch.cc', 438, 420 ]
70 silly gunzTarPerm extractEntry src/memwatch.hh
71 silly gunzTarPerm modified mode [ 'src/memwatch.hh', 438, 420 ]
72 silly gunzTarPerm extractEntry src/platformcompat.hh
73 silly gunzTarPerm modified mode [ 'src/platformcompat.hh', 438, 420 ]
74 silly gunzTarPerm extractEntry src/util.cc
75 silly gunzTarPerm modified mode [ 'src/util.cc', 438, 420 ]
76 silly gunzTarPerm extractEntry src/util.hh
77 silly gunzTarPerm modified mode [ 'src/util.hh', 438, 420 ]
78 silly gunzTarPerm extractEntry examples/basic_heapdiff.js
79 silly gunzTarPerm modified mode [ 'examples/basic_heapdiff.js', 438, 420 ]
80 silly gunzTarPerm extractEntry examples/do_nothing_server.js
81 silly gunzTarPerm modified mode [ 'examples/do_nothing_server.js', 438, 420 ]
82 silly gunzTarPerm extractEntry examples/slightly_leaky.js
83 silly gunzTarPerm modified mode [ 'examples/slightly_leaky.js', 438, 420 ]
84 silly lockFile 3b4a1c8e--0-2-0-sqs-node-modules-memwatch tar://C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch
85 silly lockFile 3b4a1c8e--0-2-0-sqs-node-modules-memwatch tar://C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch
86 silly lockFile 571ac279-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Rasmus\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
87 silly lockFile 571ac279-cache-memwatch-0-2-2-package-tgz tar://C:\Users\Rasmus\AppData\Roaming\npm-cache\memwatch\0.2.2\package.tgz
88 info preinstall memwatch@0.2.2
89 verbose readDependencies using package.json deps
90 verbose readDependencies using package.json deps
91 silly resolved []
92 verbose about to build C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch
93 info build C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch
94 verbose linkStuff [ false,
94 verbose linkStuff   false,
94 verbose linkStuff   false,
94 verbose linkStuff   'C:\\Bitnami\\meanstack-3.0.2-0\\sqs\\node_modules' ]
95 info linkStuff memwatch@0.2.2
96 verbose linkBins memwatch@0.2.2
97 verbose linkMans memwatch@0.2.2
98 verbose rebuildBundles memwatch@0.2.2
99 info install memwatch@0.2.2
100 verbose unsafe-perm in lifecycle true
101 info memwatch@0.2.2 Failed to exec install script
102 info C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules\memwatch unbuild
103 info preuninstall memwatch@0.2.2
104 info uninstall memwatch@0.2.2
105 verbose true,C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules,C:\Bitnami\meanstack-3.0.2-0\sqs\node_modules unbuild memwatch@0.2.2
106 info postuninstall memwatch@0.2.2
107 error memwatch@0.2.2 install: `node-gyp rebuild`
107 error Exit status 1
108 error Failed at the memwatch@0.2.2 install script.
108 error This is most likely a problem with the memwatch package,
108 error not with npm itself.
108 error Tell the author that this fails on your system:
108 error     node-gyp rebuild
108 error You can get their info via:
108 error     npm owner ls memwatch
108 error There is likely additional logging output above.
109 error System Windows_NT 6.1.7601
110 error command "C:\\Bitnami\\meanstack-3.0.2-0\\nodejs\\\\node.exe" "C:\\Bitnami\\meanstack-3.0.2-0\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "install" "memwatch"
111 error cwd C:\Bitnami\meanstack-3.0.2-0\sqs\test
112 error node -v v0.12.2
113 error npm -v 1.4.3
114 error code ELIFECYCLE
115 verbose exit [ 1, true ]
